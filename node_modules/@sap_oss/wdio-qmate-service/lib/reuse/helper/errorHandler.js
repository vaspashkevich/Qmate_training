"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomError = void 0;
const errorMessages_1 = require("../helper/errorMessages");
class CustomError extends Error {
    constructor(message, displayStack) {
        super(message);
        this.name = this.constructor.name;
        this.message = message;
        this.stack = displayStack ? this._getFormattedStackTrace(this.stack) : "";
    }
    // =================================== HELPER ===================================
    _getFormattedStackTrace(stack) {
        if (stack) {
            var stackTrace = stack
                .split("\n")
                .map((line) => {
                return line.includes("ErrorHandler.logException") ? "" : line;
            })
                .filter(Boolean)
                .join("\n");
            return stackTrace;
        }
        else {
            return "";
        }
    }
}
exports.CustomError = CustomError;
class ErrorHandler {
    constructor(logStackTrace = true) {
        this.logStackTrace = logStackTrace;
    }
    logException(errorObject, customErrorMessage) {
        if (errorObject instanceof Error) {
            let functionName = this._retrieveFunctionNameFromStack(errorObject);
            if (customErrorMessage) {
                throw new CustomError(errorMessages_1.ErrorMessages.customErrorWithMessage(functionName, customErrorMessage), this.logStackTrace);
            }
            else if (errorObject.message) {
                throw new CustomError(errorMessages_1.ErrorMessages.customErrorWithMessage(functionName, errorObject.message), this.logStackTrace);
            }
            else {
                throw new CustomError(errorMessages_1.ErrorMessages.customErrorWithoutMessage(functionName), this.logStackTrace);
            }
        }
        else {
            throw new CustomError(errorMessages_1.ErrorMessages.genericErrorMessage(), this.logStackTrace);
        }
    }
    // =================================== HELPER ===================================
    _retrieveFunctionNameFromStack(errorObject) {
        if (errorObject instanceof Error && errorObject.stack) {
            var stackTrace = errorObject.stack.split("\n");
            const startIndex = stackTrace[1].indexOf("at") + 2;
            const endIndex = stackTrace[1].indexOf("(");
            var functionName = stackTrace[1].substring(startIndex, endIndex).trim();
            return !functionName.toLowerCase().includes("context") ? functionName : "";
        }
        else {
            return "";
        }
    }
}
exports.default = ErrorHandler;
//# sourceMappingURL=errorHandler.js.map