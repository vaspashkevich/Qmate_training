import { Element } from "../../../../@types/wdio";
/**
 * @class assertion
 * @memberof nonUi5
 */
export declare class Assertion {
    private vlf;
    /**
     * @function expectAttributeToBe
     * @memberOf nonUi5.assertion
     * @description Expects the attributes value of the passed element to be the compare value.
     * @param {Object} elem - The element.
     * @param {String} compareValue - The compare value.
     * @param {String} [attribute] - The attribute to compare. If not passed, it will compare the inner HTML content of the element.
     * @example const elem = await nonUi5.element.getById("button01");
     * await nonUi5.assertion.expectAttributeToBe(elem, "Save");
     * @example const elem = await nonUi5.element.getById("button01");
     * await nonUi5.assertion.expectAttributeToBe(element, "Save", "title");
     */
    expectAttributeToBe(elem: Element, compareValue: string, attribute: string): Promise<void>;
    /**
     * @function expectAttributeToContain
     * @memberOf nonUi5.assertion
     * @description Expects the attributes value of the passed element to contain the compare value.
     * @param {Object} elem - The element.
     * @param {String} compareValue - The compare value.
     * @param {String} [attribute] - The attribute to compare. If not passed, it will compare the inner HTML content of the element.
     * @example const elem = await nonUi5.element.getById("button01");
     * await nonUi5.assertion.expectAttributeToContain(element, "Save", "title");
     */
    expectAttributeToContain(elem: Element, compareValue: string, attribute: string): Promise<any>;
    /**
     * @function expectValueToBe
     * @memberOf nonUi5.assertion
     * @description Expects the attributes value of the passed element to be the compare value.
     * @param {Object} elem - The element.
     * @param {String} compareValue - The compare value.
     * @example const elem = await nonUi5.element.getById("button01");
     * await nonUi5.assertion.expectValueToBe(elem, "Save");
     */
    expectValueToBe(elem: Element, compareValue: string): Promise<void>;
    /**
     * @function expectToBeVisible
     * @memberOf nonUi5.assertion
     * @description Expects that the element is visible to the user.
     * @param {Object} element - The element.
     * @example const elem = await nonUi5.element.getById("button01");
     * await nonUi5.assertion.expectToBeVisible(elem);
     */
    expectToBeVisible(element: Element): Promise<void>;
    /**
     * @function expectToBeNotVisible
     * @memberOf nonUi5.assertion
     * @description Expects that the element is not visible to the user.
     * @param {Object} element - The element.
     * @param {Number} [timeout=30000] - The timeout to wait (ms). Recommendation is to lower the timeout since the element is not expected to show up.
     * @example const elem = await nonUi5.element.getById("button01");
     * await nonUi5.assertion.expectToBeNotVisible(elem, 5000);
     */
    expectToBeNotVisible(element: Element, timeout?: string | number): Promise<void>;
}
declare const _default: Assertion;
export default _default;
