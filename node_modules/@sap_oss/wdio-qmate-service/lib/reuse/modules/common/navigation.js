"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Navigation = void 0;
const verboseLogger_1 = require("../../helper/verboseLogger");
/**
 * @class navigation
 * @memberof common
 */
class Navigation {
    constructor() {
        this.vlf = new verboseLogger_1.VerboseLoggerFactory("common", "navigation");
    }
    /**
     * @function navigateToUrl
     * @memberOf common.navigation
     * @description Navigates to the passed url.
     * @param {String} url - The url.
     * @example await common.navigation.navigateToUrl("www.sap.com");
     */
    async navigateToUrl(url) {
        const vl = this.vlf.initLog(this.navigateToUrl);
        if (url) {
            await browser.navigateTo(url);
            await util.browser.logCurrentUrl();
        }
        else {
            throw new Error("Function 'navigateToUrl' failed: Please provide an url as argument.");
        }
    }
    /**
     * @function navigateToUrlAndRetry
     * @memberOf common.navigation
     * @description Navigates to the passed url and retries the function in case of a failure.
     * @param {String} url - The url to navigate to.
     * @param {Integer} [retries=3] - The number of retries, can be set in config for all functions under params stepsRetries.
     * @param {Integer} [interval=5000] - The interval of the retries (ms), can be set in config for all functions under params stepRetriesIntervals.
     * @example await common.navigation.navigateToUrlAndRetry("www.sap.com");
     */
    async navigateToUrlAndRetry(url, retries = 3, interval = 5000) {
        const vl = this.vlf.initLog(this.navigateToUrl);
        await util.function.retry(this.navigateToUrl, [url], retries, interval, this);
    }
}
exports.Navigation = Navigation;
exports.default = new Navigation();
//# sourceMappingURL=navigation.js.map